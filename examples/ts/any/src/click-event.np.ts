// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import { NanoBufReader, NanoBufWriter, type NanoPackMessage } from "nanopack";

class ClickEvent implements NanoPackMessage {
  public static TYPE_ID = 837166865;

  public readonly typeId: number = 837166865;

  public readonly headerSize: number = 16;

  constructor(
    public x: number,
    public y: number,
    public timestamp: bigint,
  ) {}

  public static fromBytes(
    bytes: Uint8Array,
  ): { bytesRead: number; result: ClickEvent } | null {
    const reader = new NanoBufReader(bytes);
    return ClickEvent.fromReader(reader);
  }

  public static fromReader(
    reader: NanoBufReader,
  ): { bytesRead: number; result: ClickEvent } | null {
    let ptr = 16;

    const x = reader.readDouble(ptr);
    ptr += 8;

    const y = reader.readDouble(ptr);
    ptr += 8;

    const timestamp = reader.readInt64(ptr);
    ptr += 8;

    return { bytesRead: ptr, result: new ClickEvent(x, y, timestamp) };
  }

  public writeTo(writer: NanoBufWriter, offset: number = 0): number {
    let bytesWritten = 16;

    writer.writeTypeId(837166865, offset);

    writer.appendDouble(this.x);
    writer.writeFieldSize(0, 8, offset);
    bytesWritten += 8;

    writer.appendDouble(this.y);
    writer.writeFieldSize(1, 8, offset);
    bytesWritten += 8;

    writer.appendInt64(this.timestamp);
    writer.writeFieldSize(2, 8, offset);
    bytesWritten += 8;

    return bytesWritten;
  }

  public bytes(): Uint8Array {
    const writer = new NanoBufWriter(16);
    this.writeTo(writer);
    return writer.bytes;
  }
}

export { ClickEvent };
