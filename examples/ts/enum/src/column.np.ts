// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import { NanoBufReader, NanoBufWriter, type NanoPackMessage } from "nanopack";

import type { TAlignment } from "./alignment.np.js";

class Column implements NanoPackMessage {
  public static TYPE_ID = 2415007766;

  public readonly typeId: number = 2415007766;

  public readonly headerSize: number = 8;

  constructor(public alignment: TAlignment) {}

  public static fromBytes(
    bytes: Uint8Array,
  ): { bytesRead: number; result: Column } | null {
    const reader = new NanoBufReader(bytes);
    return Column.fromReader(reader);
  }

  public static fromReader(
    reader: NanoBufReader,
  ): { bytesRead: number; result: Column } | null {
    let ptr = 8;

    const alignmentByteLength = reader.readFieldSize(0);
    const alignment = reader.readString(ptr, alignmentByteLength) as TAlignment;
    ptr += alignmentByteLength;

    return { bytesRead: ptr, result: new Column(alignment) };
  }

  public writeTo(writer: NanoBufWriter, offset: number = 0): number {
    let bytesWritten = 8;

    writer.writeTypeId(2415007766, offset);

    const alignmentByteLength = writer.appendString(this.alignment);
    writer.writeFieldSize(0, alignmentByteLength, offset);
    bytesWritten += alignmentByteLength;

    return bytesWritten;
  }

  public bytes(): Uint8Array {
    const writer = new NanoBufWriter(8);
    this.writeTo(writer);
    return writer.bytes;
  }
}

export { Column };
