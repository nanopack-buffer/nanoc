// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import { NanoBufWriter } from "nanopack";
import {
  RpcServer,
  RpcClient,
  RpcMessageType,
  type RpcServerChannel,
} from "nanopack/rpc";

interface IExampleServiceService {
  add(a: number, b: number): number;
  subtract(a: number, b: number): number;
}

class ExampleServiceServiceServer extends RpcServer {
  constructor(
    channel: RpcServerChannel,
    private impl: IExampleServiceService,
  ) {
    super(channel);
    this.on("add", (reader, offset, msgId) => {
      let ptr = offset;
      const a = reader.readInt32(ptr);
      ptr += 4;
      const b = reader.readInt32(ptr);
      ptr += 4;

      const result = this.impl.add(a, b);
      const writer = new NanoBufWriter(6 + 4);
      writer.appendUint8(RpcMessageType.RESPONSE);
      writer.appendUint32(msgId);
      writer.appendUint8(0);
      writer.appendInt32(result);
      return writer;
    });
    this.on("subtract", (reader, offset, msgId) => {
      let ptr = offset;
      const a = reader.readInt32(ptr);
      ptr += 4;
      const b = reader.readInt32(ptr);
      ptr += 4;

      const result = this.impl.subtract(a, b);
      const writer = new NanoBufWriter(6 + 4);
      writer.appendUint8(RpcMessageType.RESPONSE);
      writer.appendUint32(msgId);
      writer.appendUint8(0);
      writer.appendInt32(result);
      return writer;
    });
  }
}

class ExampleServiceServiceClient extends RpcClient {
  async add(a: number, b: number): Promise<number> {
    const writer = new NanoBufWriter(9 + 3 + 8);
    const msgId = this.newMessageId();
    writer.appendUint8(RpcMessageType.REQUEST);
    writer.appendUint32(msgId);
    writer.appendStringAndSize("add");
    writer.appendInt32(a);
    writer.appendInt32(b);

    const reader = await this.sendRequestData(msgId, writer.bytes);
    let ptr = 5;
    const errFlag = reader.readUint8(ptr++);
    if (errFlag) {
      throw new Error("error");
    }

    const result = reader.readInt32(ptr);
    ptr += 4;
    return result;
  }
  async subtract(a: number, b: number): Promise<number> {
    const writer = new NanoBufWriter(9 + 8 + 8);
    const msgId = this.newMessageId();
    writer.appendUint8(RpcMessageType.REQUEST);
    writer.appendUint32(msgId);
    writer.appendStringAndSize("subtract");
    writer.appendInt32(a);
    writer.appendInt32(b);

    const reader = await this.sendRequestData(msgId, writer.bytes);
    let ptr = 5;
    const errFlag = reader.readUint8(ptr++);
    if (errFlag) {
      throw new Error("error");
    }

    const result = reader.readInt32(ptr);
    ptr += 4;
    return result;
  }
}

export { ExampleServiceServiceServer, ExampleServiceServiceClient };
export type { IExampleServiceService };
