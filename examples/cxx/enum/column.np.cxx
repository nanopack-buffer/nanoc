// AUTOMATICALLY GENERATED BY NANOC

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "column.np.hxx"

Column::Column(const Alignment &alignment) : alignment(alignment) {}

size_t Column::read_from(NanoPack::Reader &reader) {
  uint8_t *buf = reader.buffer;
  int ptr = 8;

  const int32_t alignment_size = reader.read_field_size(0);
  std::string alignment_raw_value;
  reader.read_string(ptr, alignment_size, alignment_raw_value);
  ptr += alignment_size;
  alignment = Alignment(alignment_raw_value);

  return ptr;
}

NanoPack::TypeId Column::type_id() const { return TYPE_ID; }

size_t Column::header_size() const { return 8; }

size_t Column::write_to(NanoPack::Writer &writer, int offset) const {
  const size_t writer_size_before = writer.size();

  writer.reserve_header(8);

  writer.write_type_id(TYPE_ID, offset);

  writer.write_field_size(0, alignment.value().size(), offset);
  writer.append_string(alignment.value());

  return writer.size() - writer_size_before;
}
