// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#ifndef WEEK_ENUM_NP_HXX
#define WEEK_ENUM_NP_HXX

#include <array>

class Week {
public:
  enum WeekMember {
    SUNDAY,
    MONDAY,
    TUESDAY,
    WEDNESDAY,
    THURSDAY,
    FRIDAY,
    SATURDAY,
  };

private:
  constexpr static std::array<int8_t, 7> values = {
      0, 1, 2, 3, 4, 5, 6,
  };
  WeekMember enum_value;
  int8_t _value;

public:
  const int8_t &value = _value;

  Week() = default;

  explicit Week(const int8_t &value) {
    switch (value) {
    case 0:
      enum_value = SUNDAY;
      break;
    case 1:
      enum_value = MONDAY;
      break;
    case 2:
      enum_value = TUESDAY;
      break;
    case 3:
      enum_value = WEDNESDAY;
      break;
    case 4:
      enum_value = THURSDAY;
      break;
    case 5:
      enum_value = FRIDAY;
      break;
    case 6:
      enum_value = SATURDAY;
      break;
    default:
      throw std::runtime_error("invalid value for enum Week");
    }
    _value = values[enum_value];
  }

  constexpr Week(WeekMember member)
      : enum_value(member), value(values[member]) {}

  constexpr operator WeekMember() const { return enum_value; }

  explicit operator bool() const = delete;

  Week &operator=(const Week &other) {
    enum_value = other.enum_value;
    _value = other._value;
    return *this;
  }
};

#endif
