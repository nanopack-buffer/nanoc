// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "np_date.np.hxx"

NpDate::NpDate(int8_t day, const Week &week, const Month &month, int32_t year)
    : day(day), week(week), month(month), year(year) {}

NpDate::NpDate(const NanoPack::Reader &reader, int &bytes_read) {
  const auto begin = reader.begin();
  int ptr = 20;

  const int8_t day = reader.read_int8(ptr);
  ptr += 1;
  this->day = day;

  const int8_t week_raw_value = reader.read_int8(ptr);
  ptr += 1;
  week = Week(week_raw_value);

  const int8_t month_raw_value = reader.read_int8(ptr);
  ptr += 1;
  month = Month(month_raw_value);

  const int32_t year = reader.read_int32(ptr);
  ptr += 4;
  this->year = year;

  bytes_read = ptr;
}

NpDate::NpDate(std::vector<uint8_t>::const_iterator begin, int &bytes_read)
    : NpDate(NanoPack::Reader(begin), bytes_read) {}

NanoPack::TypeId NpDate::type_id() const { return TYPE_ID; }

std::vector<uint8_t> NpDate::data() const {
  std::vector<uint8_t> buf(20);
  NanoPack::Writer writer(&buf);

  writer.write_type_id(TYPE_ID);

  writer.write_field_size(-1, 1);
  writer.append_int8(day);

  writer.write_field_size(0, 1);
  writer.append_int8(week.value());

  writer.write_field_size(1, 1);
  writer.append_int8(month.value());

  writer.write_field_size(2, 4);
  writer.append_int32(year);

  return buf;
}

std::vector<uint8_t> NpDate::data_with_length_prefix() const {
  std::vector<uint8_t> buf(20 + 4);
  NanoPack::Writer writer(&buf, 4);

  writer.write_type_id(TYPE_ID);

  writer.write_field_size(-1, 1);
  writer.append_int8(day);

  writer.write_field_size(0, 1);
  writer.append_int8(week.value());

  writer.write_field_size(1, 1);
  writer.append_int8(month.value());

  writer.write_field_size(2, 4);
  writer.append_int32(year);

  const size_t byte_size = buf.size() - 4;
  buf[0] = byte_size & 0xFF;
  buf[1] = byte_size & 0xFF00;
  buf[2] = byte_size & 0xFF0000;
  buf[3] = byte_size & 0xFF000000;

  return buf;
}
