// AUTOMATICALLY GENERATED BY NANOC

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "np_date.np.hxx"

NpDate::NpDate(int8_t day, const Week &week, const Month &month, int32_t year)
    : day(day), week(week), month(month), year(year) {}

size_t NpDate::read_from(NanoPack::Reader &reader) {
  uint8_t *buf = reader.buffer;
  int ptr = 20;

  reader.read_int8(ptr, day);
  ptr += 1;

  int8_t week_raw_value;
  reader.read_int8(ptr, week_raw_value);
  ptr += 1;
  week = Week(week_raw_value);

  int8_t month_raw_value;
  reader.read_int8(ptr, month_raw_value);
  ptr += 1;
  month = Month(month_raw_value);

  reader.read_int32(ptr, year);
  ptr += 4;

  return ptr;
}

NanoPack::TypeId NpDate::type_id() const { return TYPE_ID; }

size_t NpDate::header_size() const { return 20; }

size_t NpDate::write_to(NanoPack::Writer &writer, int offset) const {
  const size_t writer_size_before = writer.size();

  writer.reserve_header(20);

  writer.write_type_id(TYPE_ID, offset);

  writer.write_field_size(0, 1, offset);
  writer.append_int8(day);

  writer.write_field_size(1, 1, offset);
  writer.append_int8(week.value());

  writer.write_field_size(2, 1, offset);
  writer.append_int8(month.value());

  writer.write_field_size(3, 4, offset);
  writer.append_int32(year);

  return writer.size() - writer_size_before;
}
