// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "click_event.np.hxx"

ClickEvent::ClickEvent(double x, double y, int64_t timestamp)
    : x(x), y(y), timestamp(timestamp) {}

ClickEvent::ClickEvent(const NanoPack::Reader &reader, int &bytes_read) {
  const auto begin = reader.begin();
  int ptr = 16;

  const double x = reader.read_double(ptr);
  ptr += 8;
  this->x = x;

  const double y = reader.read_double(ptr);
  ptr += 8;
  this->y = y;

  const int64_t timestamp = reader.read_int64(ptr);
  ptr += 8;
  this->timestamp = timestamp;

  bytes_read = ptr;
}

ClickEvent::ClickEvent(std::vector<uint8_t>::const_iterator begin,
                       int &bytes_read)
    : ClickEvent(NanoPack::Reader(begin), bytes_read) {}

NanoPack::TypeId ClickEvent::type_id() const { return TYPE_ID; }

std::vector<uint8_t> ClickEvent::data() const {
  std::vector<uint8_t> buf(16);
  NanoPack::Writer writer(&buf);

  writer.write_type_id(TYPE_ID);

  writer.write_field_size(-1, 8);
  writer.append_double(x);

  writer.write_field_size(0, 8);
  writer.append_double(y);

  writer.write_field_size(1, 8);
  writer.append_int64(timestamp);

  return buf;
}

std::vector<uint8_t> ClickEvent::data_with_length_prefix() const {
  std::vector<uint8_t> buf(16 + 4);
  NanoPack::Writer writer(&buf, 4);

  writer.write_type_id(TYPE_ID);

  writer.write_field_size(-1, 8);
  writer.append_double(x);

  writer.write_field_size(0, 8);
  writer.append_double(y);

  writer.write_field_size(1, 8);
  writer.append_int64(timestamp);

  const size_t byte_size = buf.size() - 4;
  buf[0] = byte_size & 0xFF;
  buf[1] = byte_size & 0xFF00;
  buf[2] = byte_size & 0xFF0000;
  buf[3] = byte_size & 0xFF000000;

  return buf;
}
