// AUTOMATICALLY GENERATED BY NANOC

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "invoke_callback.np.hxx"

InvokeCallback::InvokeCallback(int32_t handle, NanoPack::Any args)
    : handle(handle), args(std::move(args)) {}

size_t InvokeCallback::read_from(NanoPack::Reader &reader) {
  uint8_t *buf = reader.buffer;
  int ptr = 12;

  reader.read_int32(ptr, handle);
  ptr += 4;

  const int32_t args_byte_size = reader.read_field_size(1);
  args = NanoPack::Any(reader.buffer + ptr, args_byte_size);
  ptr += args_byte_size;

  return ptr;
}

NanoPack::TypeId InvokeCallback::type_id() const { return TYPE_ID; }

size_t InvokeCallback::header_size() const { return 12; }

size_t InvokeCallback::write_to(NanoPack::Writer &writer, int offset) const {
  const size_t writer_size_before = writer.size();

  writer.reserve_header(12);

  writer.write_type_id(TYPE_ID, offset);

  writer.write_field_size(0, 4, offset);
  writer.append_int32(handle);

  writer.write_field_size(1, args.size(), offset);
  writer.append_bytes(args.data(), args.size());

  return writer.size() - writer_size_before;
}
