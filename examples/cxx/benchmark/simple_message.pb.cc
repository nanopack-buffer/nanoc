// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simple_message.proto

#include "simple_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR PbSimpleMessage_MapFieldEntry_DoNotUse::PbSimpleMessage_MapFieldEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PbSimpleMessage_MapFieldEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PbSimpleMessage_MapFieldEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PbSimpleMessage_MapFieldEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PbSimpleMessage_MapFieldEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PbSimpleMessage_MapFieldEntry_DoNotUseDefaultTypeInternal _PbSimpleMessage_MapFieldEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PbSimpleMessage::PbSimpleMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.array_field_)*/{}
  , /*decltype(_impl_._array_field_cached_byte_size_)*/{0}
  , /*decltype(_impl_.map_field_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.string_field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optional_field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.double_field_)*/0
  , /*decltype(_impl_.int_field_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PbSimpleMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PbSimpleMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PbSimpleMessageDefaultTypeInternal() {}
  union {
    PbSimpleMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PbSimpleMessageDefaultTypeInternal _PbSimpleMessage_default_instance_;
static ::_pb::Metadata file_level_metadata_simple_5fmessage_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_simple_5fmessage_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_simple_5fmessage_2eproto = nullptr;

const uint32_t TableStruct_simple_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::PbSimpleMessage_MapFieldEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PbSimpleMessage_MapFieldEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PbSimpleMessage_MapFieldEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::PbSimpleMessage_MapFieldEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PbSimpleMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PbSimpleMessage, _impl_.string_field_),
  PROTOBUF_FIELD_OFFSET(::PbSimpleMessage, _impl_.int_field_),
  PROTOBUF_FIELD_OFFSET(::PbSimpleMessage, _impl_.double_field_),
  PROTOBUF_FIELD_OFFSET(::PbSimpleMessage, _impl_.optional_field_),
  PROTOBUF_FIELD_OFFSET(::PbSimpleMessage, _impl_.array_field_),
  PROTOBUF_FIELD_OFFSET(::PbSimpleMessage, _impl_.map_field_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::PbSimpleMessage_MapFieldEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::PbSimpleMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_PbSimpleMessage_MapFieldEntry_DoNotUse_default_instance_._instance,
  &::_PbSimpleMessage_default_instance_._instance,
};

const char descriptor_table_protodef_simple_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024simple_message.proto\"\341\001\n\017PbSimpleMessa"
  "ge\022\024\n\014string_field\030\001 \001(\t\022\021\n\tint_field\030\002 "
  "\001(\005\022\024\n\014double_field\030\003 \001(\001\022\026\n\016optional_fi"
  "eld\030\004 \001(\t\022\023\n\013array_field\030\005 \003(\005\0221\n\tmap_fi"
  "eld\030\006 \003(\0132\036.PbSimpleMessage.MapFieldEntr"
  "y\032/\n\rMapFieldEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\010:\0028\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_simple_5fmessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_simple_5fmessage_2eproto = {
    false, false, 258, descriptor_table_protodef_simple_5fmessage_2eproto,
    "simple_message.proto",
    &descriptor_table_simple_5fmessage_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_simple_5fmessage_2eproto::offsets,
    file_level_metadata_simple_5fmessage_2eproto, file_level_enum_descriptors_simple_5fmessage_2eproto,
    file_level_service_descriptors_simple_5fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_simple_5fmessage_2eproto_getter() {
  return &descriptor_table_simple_5fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_simple_5fmessage_2eproto(&descriptor_table_simple_5fmessage_2eproto);

// ===================================================================

PbSimpleMessage_MapFieldEntry_DoNotUse::PbSimpleMessage_MapFieldEntry_DoNotUse() {}
PbSimpleMessage_MapFieldEntry_DoNotUse::PbSimpleMessage_MapFieldEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PbSimpleMessage_MapFieldEntry_DoNotUse::MergeFrom(const PbSimpleMessage_MapFieldEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PbSimpleMessage_MapFieldEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_simple_5fmessage_2eproto_getter, &descriptor_table_simple_5fmessage_2eproto_once,
      file_level_metadata_simple_5fmessage_2eproto[0]);
}

// ===================================================================

class PbSimpleMessage::_Internal {
 public:
};

PbSimpleMessage::PbSimpleMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PbSimpleMessage::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:PbSimpleMessage)
}
PbSimpleMessage::PbSimpleMessage(const PbSimpleMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PbSimpleMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.array_field_){from._impl_.array_field_}
    , /*decltype(_impl_._array_field_cached_byte_size_)*/{0}
    , /*decltype(_impl_.map_field_)*/{}
    , decltype(_impl_.string_field_){}
    , decltype(_impl_.optional_field_){}
    , decltype(_impl_.double_field_){}
    , decltype(_impl_.int_field_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.map_field_.MergeFrom(from._impl_.map_field_);
  _impl_.string_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_string_field().empty()) {
    _this->_impl_.string_field_.Set(from._internal_string_field(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optional_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optional_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optional_field().empty()) {
    _this->_impl_.optional_field_.Set(from._internal_optional_field(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.double_field_, &from._impl_.double_field_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.int_field_) -
    reinterpret_cast<char*>(&_impl_.double_field_)) + sizeof(_impl_.int_field_));
  // @@protoc_insertion_point(copy_constructor:PbSimpleMessage)
}

inline void PbSimpleMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.array_field_){arena}
    , /*decltype(_impl_._array_field_cached_byte_size_)*/{0}
    , /*decltype(_impl_.map_field_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.string_field_){}
    , decltype(_impl_.optional_field_){}
    , decltype(_impl_.double_field_){0}
    , decltype(_impl_.int_field_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.string_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optional_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optional_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PbSimpleMessage::~PbSimpleMessage() {
  // @@protoc_insertion_point(destructor:PbSimpleMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PbSimpleMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.array_field_.~RepeatedField();
  _impl_.map_field_.Destruct();
  _impl_.map_field_.~MapField();
  _impl_.string_field_.Destroy();
  _impl_.optional_field_.Destroy();
}

void PbSimpleMessage::ArenaDtor(void* object) {
  PbSimpleMessage* _this = reinterpret_cast< PbSimpleMessage* >(object);
  _this->_impl_.map_field_.Destruct();
}
void PbSimpleMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PbSimpleMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PbSimpleMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.array_field_.Clear();
  _impl_.map_field_.Clear();
  _impl_.string_field_.ClearToEmpty();
  _impl_.optional_field_.ClearToEmpty();
  ::memset(&_impl_.double_field_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.int_field_) -
      reinterpret_cast<char*>(&_impl_.double_field_)) + sizeof(_impl_.int_field_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PbSimpleMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string string_field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_string_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PbSimpleMessage.string_field"));
        } else
          goto handle_unusual;
        continue;
      // int32 int_field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.int_field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double double_field = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.double_field_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string optional_field = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_optional_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PbSimpleMessage.optional_field"));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 array_field = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_array_field(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_array_field(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, bool> map_field = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.map_field_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PbSimpleMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbSimpleMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string string_field = 1;
  if (!this->_internal_string_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_field().data(), static_cast<int>(this->_internal_string_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PbSimpleMessage.string_field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_string_field(), target);
  }

  // int32 int_field = 2;
  if (this->_internal_int_field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_int_field(), target);
  }

  // double double_field = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_double_field = this->_internal_double_field();
  uint64_t raw_double_field;
  memcpy(&raw_double_field, &tmp_double_field, sizeof(tmp_double_field));
  if (raw_double_field != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_double_field(), target);
  }

  // string optional_field = 4;
  if (!this->_internal_optional_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optional_field().data(), static_cast<int>(this->_internal_optional_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PbSimpleMessage.optional_field");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_optional_field(), target);
  }

  // repeated int32 array_field = 5;
  {
    int byte_size = _impl_._array_field_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_array_field(), byte_size, target);
    }
  }

  // map<string, bool> map_field = 6;
  if (!this->_internal_map_field().empty()) {
    using MapType = ::_pb::Map<std::string, bool>;
    using WireHelper = PbSimpleMessage_MapFieldEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_field();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "PbSimpleMessage.MapFieldEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbSimpleMessage)
  return target;
}

size_t PbSimpleMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PbSimpleMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 array_field = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.array_field_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._array_field_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, bool> map_field = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_field_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::const_iterator
      it = this->_internal_map_field().begin();
      it != this->_internal_map_field().end(); ++it) {
    total_size += PbSimpleMessage_MapFieldEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string string_field = 1;
  if (!this->_internal_string_field().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_string_field());
  }

  // string optional_field = 4;
  if (!this->_internal_optional_field().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optional_field());
  }

  // double double_field = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_double_field = this->_internal_double_field();
  uint64_t raw_double_field;
  memcpy(&raw_double_field, &tmp_double_field, sizeof(tmp_double_field));
  if (raw_double_field != 0) {
    total_size += 1 + 8;
  }

  // int32 int_field = 2;
  if (this->_internal_int_field() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_int_field());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PbSimpleMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PbSimpleMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PbSimpleMessage::GetClassData() const { return &_class_data_; }


void PbSimpleMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PbSimpleMessage*>(&to_msg);
  auto& from = static_cast<const PbSimpleMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PbSimpleMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.array_field_.MergeFrom(from._impl_.array_field_);
  _this->_impl_.map_field_.MergeFrom(from._impl_.map_field_);
  if (!from._internal_string_field().empty()) {
    _this->_internal_set_string_field(from._internal_string_field());
  }
  if (!from._internal_optional_field().empty()) {
    _this->_internal_set_optional_field(from._internal_optional_field());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_double_field = from._internal_double_field();
  uint64_t raw_double_field;
  memcpy(&raw_double_field, &tmp_double_field, sizeof(tmp_double_field));
  if (raw_double_field != 0) {
    _this->_internal_set_double_field(from._internal_double_field());
  }
  if (from._internal_int_field() != 0) {
    _this->_internal_set_int_field(from._internal_int_field());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PbSimpleMessage::CopyFrom(const PbSimpleMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PbSimpleMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbSimpleMessage::IsInitialized() const {
  return true;
}

void PbSimpleMessage::InternalSwap(PbSimpleMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.array_field_.InternalSwap(&other->_impl_.array_field_);
  _impl_.map_field_.InternalSwap(&other->_impl_.map_field_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.string_field_, lhs_arena,
      &other->_impl_.string_field_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optional_field_, lhs_arena,
      &other->_impl_.optional_field_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PbSimpleMessage, _impl_.int_field_)
      + sizeof(PbSimpleMessage::_impl_.int_field_)
      - PROTOBUF_FIELD_OFFSET(PbSimpleMessage, _impl_.double_field_)>(
          reinterpret_cast<char*>(&_impl_.double_field_),
          reinterpret_cast<char*>(&other->_impl_.double_field_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PbSimpleMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_simple_5fmessage_2eproto_getter, &descriptor_table_simple_5fmessage_2eproto_once,
      file_level_metadata_simple_5fmessage_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PbSimpleMessage_MapFieldEntry_DoNotUse*
Arena::CreateMaybeMessage< ::PbSimpleMessage_MapFieldEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PbSimpleMessage_MapFieldEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::PbSimpleMessage*
Arena::CreateMaybeMessage< ::PbSimpleMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PbSimpleMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
