// AUTOMATICALLY GENERATED BY NANOC

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "text.np.hxx"

Text::Text(int32_t id, std::string content)
    : Widget(id), content(std::move(content)) {}

size_t Text::read_from(NanoPack::Reader &reader) {
  uint8_t *buf = reader.buffer;
  int ptr = 12;

  reader.read_int32(ptr, id);
  ptr += 4;

  const int32_t content_size = reader.read_field_size(1);
  reader.read_string(ptr, content_size, content);
  ptr += content_size;

  return ptr;
}

NanoPack::TypeId Text::type_id() const { return TYPE_ID; }

size_t Text::header_size() const { return 12; }

size_t Text::write_to(NanoPack::Writer &writer, int offset) const {
  const size_t writer_size_before = writer.size();

  writer.reserve_header(12);

  writer.write_type_id(TYPE_ID, offset);

  writer.write_field_size(0, 4, offset);
  writer.append_int32(id);

  writer.write_field_size(1, content.size(), offset);
  writer.append_string(content);

  return writer.size() - writer_size_before;
}
