// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "text.np.hxx"

Text::Text(int32_t id, std::string content)
    : Widget(id), content(std::move(content)) {}

Text::Text(const NanoPack::Reader &reader, int &bytes_read) : Widget() {
  const auto begin = reader.begin();
  int ptr = 12;

  const int32_t id = reader.read_int32(ptr);
  ptr += 4;
  this->id = id;

  const int32_t content_size = reader.read_field_size(1);
  content = reader.read_string(ptr, content_size);
  ptr += content_size;

  bytes_read = ptr;
}

Text::Text(std::vector<uint8_t>::const_iterator begin, int &bytes_read)
    : Text(NanoPack::Reader(begin), bytes_read) {}

NanoPack::TypeId Text::type_id() const { return TYPE_ID; }

int Text::header_size() const { return 12; }

size_t Text::write_to(std::vector<uint8_t> &buf, int offset) const {
  const size_t buf_size_before = buf.size();

  buf.resize(offset + 12);

  NanoPack::write_type_id(TYPE_ID, offset, buf);

  NanoPack::write_field_size(0, 4, offset, buf);
  NanoPack::append_int32(id, buf);

  NanoPack::write_field_size(1, content.size(), offset, buf);
  NanoPack::append_string(content, buf);

  return buf.size() - buf_size_before;
}

std::vector<uint8_t> Text::data() const {
  std::vector<uint8_t> buf(12);
  write_to(buf, 0);
  return buf;
}
