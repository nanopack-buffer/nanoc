// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "widget.np.hxx"

Widget::Widget(int32_t id) : id(id) {}

Widget::Widget(const NanoPack::Reader &reader, int &bytes_read) {
  const auto begin = reader.begin();
  int ptr = 8;

  const int32_t id = reader.read_int32(ptr);
  ptr += 4;
  this->id = id;

  bytes_read = ptr;
}

Widget::Widget(std::vector<uint8_t>::const_iterator begin, int &bytes_read)
    : Widget(NanoPack::Reader(begin), bytes_read) {}

NanoPack::TypeId Widget::type_id() const { return TYPE_ID; }

std::vector<uint8_t> Widget::data() const {
  std::vector<uint8_t> buf(8);
  NanoPack::Writer writer(&buf);

  writer.write_type_id(TYPE_ID);

  writer.write_field_size(-1, 4);
  writer.append_int32(id);

  return buf;
}

std::vector<uint8_t> Widget::data_with_length_prefix() const {
  std::vector<uint8_t> buf(8 + 4);
  NanoPack::Writer writer(&buf, 4);

  writer.write_type_id(TYPE_ID);

  writer.write_field_size(-1, 4);
  writer.append_int32(id);

  const size_t byte_size = buf.size() - 4;
  buf[0] = byte_size & 0xFF;
  buf[1] = byte_size & 0xFF00;
  buf[2] = byte_size & 0xFF0000;
  buf[3] = byte_size & 0xFF000000;

  return buf;
}
