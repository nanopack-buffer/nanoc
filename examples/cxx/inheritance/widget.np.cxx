// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "widget.np.hxx"

Widget::Widget(int32_t id) : id(id) {}

Widget::Widget(const NanoPack::Reader &reader, int &bytes_read) {
  const auto begin = reader.begin();
  int ptr = 8;

  const int32_t id = reader.read_int32(ptr);
  ptr += 4;
  this->id = id;

  bytes_read = ptr;
}

Widget::Widget(std::vector<uint8_t>::const_iterator begin, int &bytes_read)
    : Widget(NanoPack::Reader(begin), bytes_read) {}

NanoPack::TypeId Widget::type_id() const { return TYPE_ID; }

int Widget::header_size() const { return 8; }

size_t Widget::write_to(std::vector<uint8_t> &buf, int offset) const {
  const size_t buf_size_before = buf.size();

  buf.resize(offset + 8);

  NanoPack::write_type_id(TYPE_ID, offset, buf);

  NanoPack::write_field_size(0, 4, offset, buf);
  NanoPack::append_int32(id, buf);

  return buf.size() - buf_size_before;
}

std::vector<uint8_t> Widget::data() const {
  std::vector<uint8_t> buf(8);
  write_to(buf, 0);
  return buf;
}
