// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

let ClickEvent_typeID: TypeID = 2

class ClickEvent: NanoPackMessage {
  var typeID: TypeID { return 2 }

  let x: Double
  let y: Double
  let timestamp: Int64

  init(x: Double, y: Double, timestamp: Int64) {
    self.x = x
    self.y = y
    self.timestamp = timestamp
  }

  required init?(data: Data) {
    var ptr = data.startIndex + 16

    let x: Double = data.read(at: ptr)
    ptr += 8

    let y: Double = data.read(at: ptr)
    ptr += 8

    let timestamp: Int64 = data.read(at: ptr)
    ptr += 8

    self.x = x
    self.y = y
    self.timestamp = timestamp
  }

  required init?(data: Data, bytesRead: inout Int) {
    var ptr = data.startIndex + 16

    let x: Double = data.read(at: ptr)
    ptr += 8

    let y: Double = data.read(at: ptr)
    ptr += 8

    let timestamp: Int64 = data.read(at: ptr)
    ptr += 8

    self.x = x
    self.y = y
    self.timestamp = timestamp

    bytesRead = ptr - data.startIndex
  }

  func data() -> Data? {
    var data = Data()
    data.reserveCapacity(16)

    withUnsafeBytes(of: Int32(ClickEvent_typeID)) {
      data.append(contentsOf: $0)
    }

    data.append([0], count: 3 * 4)

    data.write(size: 8, ofField: 0)
    data.append(double: x)

    data.write(size: 8, ofField: 1)
    data.append(double: y)

    data.write(size: 8, ofField: 2)
    data.append(int: timestamp)

    return data
  }
}
