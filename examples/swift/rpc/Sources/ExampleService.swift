// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

protocol ExampleServiceDelegate {
  func add(_ a: Int32, _ b: Int32) -> Int32
  func subtract(_ a: Int32, _ b: Int32) -> Int32
}

class ExampleServiceServer: NPRPCServer {
  private let delegate: ExampleServiceDelegate

  init(channel: NPRPCServerChannel, delegate: ExampleServiceDelegate) {
    self.delegate = delegate
    super.init(channel: channel)
    registerCalls()
  }

  private func registerCalls() {
    on("add") { data, offset, msgID in
      var ptr = offset
      let a: Int32 = data.read(at: ptr)
      ptr += 4
      let b: Int32 = data.read(at: ptr)
      ptr += 4

      let result = self.delegate.add(a, b)
      var data = Data(capacity: 6 + 4)
      data.append(int: NPRPCMessageType.response.rawValue)
      data.append(int: msgID)
      data.append(int: UInt8(0))
      data.append(int: result)
      return data
    }
    on("subtract") { data, offset, msgID in
      var ptr = offset
      let a: Int32 = data.read(at: ptr)
      ptr += 4
      let b: Int32 = data.read(at: ptr)
      ptr += 4

      let result = self.delegate.subtract(a, b)
      var data = Data(capacity: 6 + 4)
      data.append(int: NPRPCMessageType.response.rawValue)
      data.append(int: msgID)
      data.append(int: UInt8(0))
      data.append(int: result)
      return data
    }
  }
}

class ExampleServiceClient: NPRPCClient {
  override init(channel: NPRPCClientChannel) {
    super.init(channel: channel)
  }

  func add(_ a: Int32, _ b: Int32, completionHandler: @escaping (Int32) -> Void) {
    let msgID = newMessageID()
    var data = Data(capacity: 9 + 3 + 8)
    data.append(int: NPRPCMessageType.request.rawValue)
    data.append(int: msgID)
    data.append(int: UInt32(3))
    data.append(string: "add")
    data.append(int: a)
    data.append(int: b)

    sendRequestData(msgID, data) { data, offset in
      var ptr = offset
      let errFlag: UInt8 = data.read(at: ptr)
      ptr += 1
      guard errFlag == 0 else {
        return
      }
      let result: Int32 = data.read(at: ptr)
      ptr += 4
      completionHandler(result)
    }
  }

  @available(macOS 10.15, iOS 13, *)
  func add(_ a: Int32, _ b: Int32) async -> Int32 {
    let msgID = newMessageID()
    var data = Data(capacity: 9 + 3 + 8)
    data.append(int: NPRPCMessageType.request.rawValue)
    data.append(int: msgID)
    data.append(int: UInt32(3))
    data.append(string: "add")
    data.append(int: a)
    data.append(int: b)

    return await withCheckedContinuation { continuation in
      sendRequestData(msgID, data) { data, offset in
        var ptr = offset
        let errFlag: UInt8 = data.read(at: ptr)
        ptr += 1
        guard errFlag == 0 else {
          return
        }
        let result: Int32 = data.read(at: ptr)
        ptr += 4
        continuation.resume(returning: result)
      }
    }
  }

  func subtract(_ a: Int32, _ b: Int32, completionHandler: @escaping (Int32) -> Void) {
    let msgID = newMessageID()
    var data = Data(capacity: 9 + 8 + 8)
    data.append(int: NPRPCMessageType.request.rawValue)
    data.append(int: msgID)
    data.append(int: UInt32(8))
    data.append(string: "subtract")
    data.append(int: a)
    data.append(int: b)

    sendRequestData(msgID, data) { data, offset in
      var ptr = offset
      let errFlag: UInt8 = data.read(at: ptr)
      ptr += 1
      guard errFlag == 0 else {
        return
      }
      let result: Int32 = data.read(at: ptr)
      ptr += 4
      completionHandler(result)
    }
  }

  @available(macOS 10.15, iOS 13, *)
  func subtract(_ a: Int32, _ b: Int32) async -> Int32 {
    let msgID = newMessageID()
    var data = Data(capacity: 9 + 8 + 8)
    data.append(int: NPRPCMessageType.request.rawValue)
    data.append(int: msgID)
    data.append(int: UInt32(8))
    data.append(string: "subtract")
    data.append(int: a)
    data.append(int: b)

    return await withCheckedContinuation { continuation in
      sendRequestData(msgID, data) { data, offset in
        var ptr = offset
        let errFlag: UInt8 = data.read(at: ptr)
        ptr += 1
        guard errFlag == 0 else {
          return
        }
        let result: Int32 = data.read(at: ptr)
        ptr += 4
        continuation.resume(returning: result)
      }
    }
  }
}
