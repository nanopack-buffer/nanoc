// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

let Widget_typeID: TypeID = 1_676_374_721

class Widget: NanoPackMessage {
  var typeID: TypeID { return 1_676_374_721 }

  var headerSize: Int { return 8 }

  let id: Int32

  static func from(data: Data) -> Widget? {
    switch data.readTypeID() {
    case 1_676_374_721: return Widget(data: data)
    case 3_495_336_243: return Text(data: data)
    default: return nil
    }
  }

  static func from(data: Data, bytesRead: inout Int) -> Widget? {
    switch data.readTypeID() {
    case 1_676_374_721: return Widget(data: data, bytesRead: &bytesRead)
    case 3_495_336_243: return Text(data: data, bytesRead: &bytesRead)
    default: return nil
    }
  }

  init(id: Int32) {
    self.id = id
  }

  required init?(data: Data) {
    var ptr = data.startIndex + 8

    let id: Int32 = data.read(at: ptr)
    ptr += 4

    self.id = id
  }

  required init?(data: Data, bytesRead: inout Int) {
    var ptr = data.startIndex + 8

    let id: Int32 = data.read(at: ptr)
    ptr += 4

    self.id = id

    bytesRead = ptr - data.startIndex
  }

  func write(to data: inout Data, offset: Int) -> Int {
    let dataCountBefore = data.count

    data.reserveCapacity(offset + 8)

    data.append(typeID: TypeID(Widget_typeID))
    data.append([0], count: 1 * 4)

    data.write(size: 4, ofField: 0, offset: offset)
    data.append(int: id)

    return data.count - dataCountBefore
  }

  func data() -> Data? {
    var data = Data()
    _ = write(to: &data, offset: 0)
    return data
  }
}
