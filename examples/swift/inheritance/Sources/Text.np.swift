// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

let Text_typeID: TypeID = 3_495_336_243

class Text: Widget {
  override var typeID: TypeID { return 3_495_336_243 }

  override var headerSize: Int { return 12 }

  let content: String

  init(id: Int32, content: String) {
    self.content = content
    super.init(id: id)
  }

  required init?(data: Data) {
    var ptr = data.startIndex + 12

    let id: Int32 = data.read(at: ptr)
    ptr += 4

    let contentSize = data.readSize(ofField: 1)
    guard let content = data.read(at: ptr, withLength: contentSize) else {
      return nil
    }
    ptr += contentSize

    self.content = content
    super.init(id: id)
  }

  required init?(data: Data, bytesRead: inout Int) {
    var ptr = data.startIndex + 12

    let id: Int32 = data.read(at: ptr)
    ptr += 4

    let contentSize = data.readSize(ofField: 1)
    guard let content = data.read(at: ptr, withLength: contentSize) else {
      return nil
    }
    ptr += contentSize

    self.content = content
    super.init(id: id)

    bytesRead = ptr - data.startIndex
  }

  override func write(to data: inout Data, offset: Int) -> Int {
    let dataCountBefore = data.count

    data.reserveCapacity(offset + 12)

    data.append(typeID: TypeID(Text_typeID))
    data.append([0], count: 2 * 4)

    data.write(size: 4, ofField: 0, offset: offset)
    data.append(int: id)

    data.write(size: content.lengthOfBytes(using: .utf8), ofField: 1, offset: offset)
    data.append(string: content)

    return data.count - dataCountBefore
  }

  override func data() -> Data? {
    var data = Data()
    _ = write(to: &data, offset: 0)
    return data
  }
}
