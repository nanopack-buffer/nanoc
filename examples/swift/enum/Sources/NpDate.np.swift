// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

let NpDate_typeID: TypeID = 1

class NpDate: NanoPackMessage {
  var typeID: TypeID { return 1 }

  let day: Int8
  let week: Week
  let month: Month
  let year: Int32

  init(day: Int8, week: Week, month: Month, year: Int32) {
    self.day = day
    self.week = week
    self.month = month
    self.year = year
  }

  required init?(data: Data) {
    var ptr = data.startIndex + 20

    let day: Int8 = data.read(at: ptr)
    ptr += 1

    let weekRawValue: Int8 = data.read(at: ptr)
    ptr += 1
    guard let week = Week(rawValue: weekRawValue) else {
      return nil
    }

    let monthRawValue: Int8 = data.read(at: ptr)
    ptr += 1
    guard let month = Month(rawValue: monthRawValue) else {
      return nil
    }

    let year: Int32 = data.read(at: ptr)
    ptr += 4

    self.day = day
    self.week = week
    self.month = month
    self.year = year
  }

  required init?(data: Data, bytesRead: inout Int) {
    var ptr = data.startIndex + 20

    let day: Int8 = data.read(at: ptr)
    ptr += 1

    let weekRawValue: Int8 = data.read(at: ptr)
    ptr += 1
    guard let week = Week(rawValue: weekRawValue) else {
      return nil
    }

    let monthRawValue: Int8 = data.read(at: ptr)
    ptr += 1
    guard let month = Month(rawValue: monthRawValue) else {
      return nil
    }

    let year: Int32 = data.read(at: ptr)
    ptr += 4

    self.day = day
    self.week = week
    self.month = month
    self.year = year

    bytesRead = ptr - data.startIndex
  }

  func data() -> Data? {
    let offset = 0

    var data = Data()
    data.reserveCapacity(20)

    data.append(int: Int32(NpDate_typeID))
    data.append([0], count: 4 * 4)

    data.write(size: 1, ofField: 0, offset: offset)
    data.append(int: day)

    data.write(size: 1, ofField: 1, offset: offset)
    data.append(int: week.rawValue)

    data.write(size: 1, ofField: 2, offset: offset)
    data.append(int: month.rawValue)

    data.write(size: 4, ofField: 3, offset: offset)
    data.append(int: year)

    return data
  }

  func dataWithLengthPrefix() -> Data? {
    let offset = 4

    var data = Data()
    data.reserveCapacity(20 + 4)

    data.append(int: Int32(0))
    data.append(int: Int32(NpDate_typeID))
    data.append([0], count: 4 * 4)

    data.write(size: 1, ofField: 0, offset: offset)
    data.append(int: day)

    data.write(size: 1, ofField: 1, offset: offset)
    data.append(int: week.rawValue)

    data.write(size: 1, ofField: 2, offset: offset)
    data.append(int: month.rawValue)

    data.write(size: 4, ofField: 3, offset: offset)
    data.append(int: year)

    data.write(size: data.count, at: 0)

    return data
  }
}
