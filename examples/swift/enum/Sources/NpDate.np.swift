// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

let NpDate_typeID: TypeID = 1_732_634_645

class NpDate: NanoPackMessage {
  var typeID: TypeID { return 1_732_634_645 }

  var headerSize: Int { return 20 }

  let day: Int8
  let week: Week
  let month: Month
  let year: Int32

  init(day: Int8, week: Week, month: Month, year: Int32) {
    self.day = day
    self.week = week
    self.month = month
    self.year = year
  }

  required init?(data: Data) {
    var ptr = data.startIndex + 20

    let day: Int8 = data.read(at: ptr)
    ptr += 1

    let weekRawValue: Int8 = data.read(at: ptr)
    ptr += 1
    guard let week = Week(rawValue: weekRawValue) else {
      return nil
    }

    let monthRawValue: Int8 = data.read(at: ptr)
    ptr += 1
    guard let month = Month(rawValue: monthRawValue) else {
      return nil
    }

    let year: Int32 = data.read(at: ptr)
    ptr += 4

    self.day = day
    self.week = week
    self.month = month
    self.year = year
  }

  required init?(data: Data, bytesRead: inout Int) {
    var ptr = data.startIndex + 20

    let day: Int8 = data.read(at: ptr)
    ptr += 1

    let weekRawValue: Int8 = data.read(at: ptr)
    ptr += 1
    guard let week = Week(rawValue: weekRawValue) else {
      return nil
    }

    let monthRawValue: Int8 = data.read(at: ptr)
    ptr += 1
    guard let month = Month(rawValue: monthRawValue) else {
      return nil
    }

    let year: Int32 = data.read(at: ptr)
    ptr += 4

    self.day = day
    self.week = week
    self.month = month
    self.year = year

    bytesRead = ptr - data.startIndex
  }

  func write(to data: inout Data, offset: Int) -> Int {
    let dataCountBefore = data.count

    data.reserveCapacity(offset + 20)

    data.append(typeID: TypeID(NpDate_typeID))
    data.append([0], count: 4 * 4)

    data.write(size: 1, ofField: 0, offset: offset)
    data.append(int: day)

    data.write(size: 1, ofField: 1, offset: offset)
    data.append(int: week.rawValue)

    data.write(size: 1, ofField: 2, offset: offset)
    data.append(int: month.rawValue)

    data.write(size: 4, ofField: 3, offset: offset)
    data.append(int: year)

    return data.count - dataCountBefore
  }

  func data() -> Data? {
    var data = Data()
    _ = write(to: &data, offset: 0)
    return data
  }
}
