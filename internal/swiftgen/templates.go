package swiftgen

import "nanoc/internal/npschema"

type messageClassTemplateInfo struct {
	Schema *npschema.Message

	FieldDeclarationLines []string
	ConstructorParameters []string
	FieldInitializers     []string
	SuperConstructorArgs  []string

	ReadPtrStart           int
	FieldReadCodeFragments []string

	InitialWriteBufferSize  int
	FieldWriteCodeFragments []string
}

type messageFactoryTemplateInfo struct {
	Schemas []*npschema.Message
}

const extSwift = ".swift"

const (
	templateNameMessageClass = "SwiftMessageClass"

	templateNameMessageFactory = "SwiftMessageFactory"
)

const fileNameMessageFactoryFile = "NanoPackMessageFactory"

const messageClassTemplate = `// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

let {{.Schema.Name}}_typeID: TypeID = {{.Schema.TypeID}}

class {{.Schema.Name}}: {{if .Schema.HasParentMessage}}{{.ParentMessage.Schema.Name}}{{else}}NanoPackMessage{{end}} {
    {{if .Schema.HasParentMessage}}override{{end}} var typeID: TypeID { return {{.Schema.TypeID}} }

    {{range .FieldDeclarationLines}}
    {{.}}
    {{- end}}

    {{if .Schema.IsInherited}}
    static func from(data: Data) -> {{.Schema.Name}}? {
        switch data.readTypeID() {
        case {{.Schema.TypeID}}: return {{.Schema.Name}}(data: data)
        {{range .ChildMessages}}
        case {{.Schema.TypeID}}: return {{.Schema.Name}}(data: Data)
        {{- end}}
        default: return nil
        }
    }
    
    static func from(data: Data, bytesRead: inout Int) -> {{.Schema.Name}}? {
        switch data.readTypeID() {
        case {{.Schema.TypeID}}: return {{.Schema.Name}}(data: data, bytesRead: &bytesRead)
        {{range .ChildMessages}}
        case {{.Schema.TypeID}}: return {{.Schema.Name}}(data: Data, bytesRead: &bytesRead)
        {{- end}}
        default: return nil
        }
    }
    {{end}}

    init({{join .ConstructorParameters ", "}}) {
        {{- range .FieldInitializers}}
        {{.}}
        {{- end -}}
        {{if .Schema.HasParentMessage}}
        super({{join .SuperConstructorArgs ", "}})
        {{end}}
    }

    required init?(data: Data) {
        var ptr = {{.ReadPtrStart}}

        {{range .FieldReadCodeFragments}}
        {{.}}

        {{end}}

        {{range .FieldInitializers}}
        {{.}}
        {{- end}}
    }

    required init?(data: Data, bytesRead: inout Int) {
        var ptr = {{.ReadPtrStart}}

        {{range .FieldReadCodeFragments}}
        {{.}}

        {{end}}

		{{range .FieldInitializers}}
        {{.}}
        {{- end}}

        bytesRead = ptr
    }

    {{if .Schema.HasParentMessage}}override{{end}} func data() -> Data? {
        var data = Data()
        data.reserveCapacity({{.InitialWriteBufferSize}})

        withUnsafeBytes(of: Int32({{.Schema.Name}}_typeID)) {
            data.append(contentsOf: $0)
        }

		data.append([0], count: {{len .Schema.AllFields}} * 4)

        {{range .FieldWriteCodeFragments}}
        {{.}}

        {{end}}

        return data
    }
}
`

const messageFactoryTemplate = `// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

func makeNanoPackMessage(from data: Data, typeID: TypeID) -> NanoPackMessage? {
    switch typeID {
    {{range .Schemas}}
    case {{.Schema.TypeID}}: return {{.Schema.Name}}(data: Data)
    {{- end}}
    default: return nil
    }
}
`
