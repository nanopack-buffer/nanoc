package swiftgen

import "nanoc/internal/npschema"

type messageClassTemplateInfo struct {
	Schema *npschema.Message

	FieldDeclarationLines []string
	ConstructorParameters []string
	FieldInitializers     []string
	SuperConstructorArgs  []string

	ReadPtrStart           int
	FieldReadCodeFragments []string

	InitialWriteBufferSize  int
	FieldWriteCodeFragments []string
}

type messageFactoryTemplateInfo struct {
	Schemas []*npschema.Message
}

type enumTemplateInfo struct {
	EnumName           string
	SwiftValueTypeName string
	MemberDeclarations []string
}

const extSwift = ".np.swift"

const (
	templateNameMessageClass = "SwiftMessageClass"

	templateNameMessageFactory = "SwiftMessageFactory"

	templateNameEnum = "SwiftEnum"
)

const fileNameMessageFactoryFile = "NanoPackMessageFactory"

const messageClassTemplate = `// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

let {{.Schema.Name}}_typeID: TypeID = {{.Schema.TypeID}}

class {{.Schema.Name}}: {{if .Schema.HasParentMessage}}{{.Schema.ParentMessage.Name}}{{else}}NanoPackMessage{{end}} {
    {{if .Schema.HasParentMessage}}override{{end}} var typeID: TypeID { return {{.Schema.TypeID}} }

    {{if .Schema.HasParentMessage}}override{{end}} var headerSize: Int { return {{.Schema.HeaderSize}} }

    {{range .FieldDeclarationLines}}
    {{.}}
    {{- end}}

    {{if .Schema.IsInherited}}
    static func from(data: Data) -> {{.Schema.Name}}? {
        switch data.readTypeID() {
        case {{.Schema.TypeID}}: return {{.Schema.Name}}(data: data)
        {{range .Schema.ChildMessages -}}
        case {{.TypeID}}: return {{.Name}}(data: data)
        {{- end}}
        default: return nil
        }
    }
    
    static func from(data: Data, bytesRead: inout Int) -> {{.Schema.Name}}? {
        switch data.readTypeID() {
        case {{.Schema.TypeID}}: return {{.Schema.Name}}(data: data, bytesRead: &bytesRead)
        {{range .Schema.ChildMessages -}}
        case {{.TypeID}}: return {{.Name}}(data: data, bytesRead: &bytesRead)
        {{- end}}
        default: return nil
        }
    }
    {{end}}

    init({{join .ConstructorParameters ", "}}) {
        {{- range .FieldInitializers}}
        {{.}}
        {{- end -}}
        {{if .Schema.HasParentMessage}}
        super.init({{join .SuperConstructorArgs ", "}})
        {{- end}}
    }

    required init?(data: Data) {
        var ptr = data.startIndex + {{.ReadPtrStart}}

        {{range .FieldReadCodeFragments}}
        {{.}}

        {{end}}

        {{range .FieldInitializers}}
        {{.}}
        {{- end -}}
        {{if .Schema.HasParentMessage}}
        super.init({{join .SuperConstructorArgs ", "}})
        {{- end}}
    }

    required init?(data: Data, bytesRead: inout Int) {
        var ptr = data.startIndex + {{.ReadPtrStart}}

        {{range .FieldReadCodeFragments}}
        {{.}}

        {{end}}

		{{range .FieldInitializers}}
        {{.}}
        {{- end -}}
        {{if .Schema.HasParentMessage}}
        super.init({{join .SuperConstructorArgs ", "}})
        {{- end}}

        bytesRead = ptr - data.startIndex
    }

    {{if .Schema.HasParentMessage}}override{{end}} func write(to data: inout Data, offset: Int) -> Int {
        let dataCountBefore = data.count

		data.reserveCapacity(offset + {{.InitialWriteBufferSize}})

		data.append(typeID: TypeID({{.Schema.Name}}_typeID))
		data.append([0], count: {{len .Schema.AllFields}} * 4)

        {{range .FieldWriteCodeFragments}}
        {{.}}

        {{end}}

        return data.count - dataCountBefore
    }

    {{if .Schema.HasParentMessage}}override{{end}} func data() -> Data? {
        var data = Data()
        _ = write(to: &data, offset: 0)
        return data
    }
}
`

const messageFactoryTemplate = `// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

func makeNanoPackMessage(from data: Data) -> NanoPackMessage? {
    let typeID = data.readTypeID()
    switch typeID {
    {{- range .Schemas}}
    case {{.TypeID}}: return {{.Name}}(data: data)
    {{- end}}
    default: return nil
    }
}

func makeNanoPackMessage(from data: Data, bytesRead: inout Int) -> NanoPackMessage? {
    let typeID = data.readTypeID()
    switch typeID {
    {{- range .Schemas}}
    case {{.TypeID}}: return {{.Name}}(data: data, bytesRead: &bytesRead)
    {{- end}}
    default: return nil
    }
}
`

const enumTemplate = `// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation

enum {{.EnumName}}: {{.SwiftValueTypeName}} {
{{- range .MemberDeclarations}}
{{.}}
{{- end}}
}
`
